###################### OpenHands Configuration Example ######################
#
# All settings have default values, so you only need to uncomment and
# modify what you want to change
# The fields within each section are sorted in alphabetical order.
#
##############################################################################

#################################### Core ####################################
# General core configurations
##############################################################################
[core]
# API key for E2B
#e2b_api_key = ""

# Base path for the workspace
workspace_base = "./workspace"

# Cache directory path
#cache_dir = "/tmp/cache"

# Debugging enabled
#debug = false

# Disable color in terminal output
#disable_color = false

# Enable saving and restoring the session when run from CLI
#enable_cli_session = false

# File store path
#file_store_path = "/tmp/file_store"

# File store type
#file_store = "memory"

# List of allowed file extensions for uploads
#file_uploads_allowed_extensions = [".*"]

# Maximum file size for uploads, in megabytes
#file_uploads_max_file_size_mb = 0

# Maximum budget per task, 0.0 means no limit
#max_budget_per_task = 0.0

# Maximum number of iterations
#max_iterations = 100

# Path to mount the workspace in the sandbox
#workspace_mount_path_in_sandbox = "/workspace"

# Path to mount the workspace
#workspace_mount_path = ""

# Path to rewrite the workspace mount path to
#workspace_mount_rewrite = ""

# Run as openhands
#run_as_openhands = true

# Runtime environment
#runtime = "eventstream"

# Name of the default agent
#default_agent = "CodeActAgent"

# JWT secret for authentication
#jwt_secret = ""

# Restrict file types for file uploads
#file_uploads_restrict_file_types = false

# List of allowed file extensions for uploads
#file_uploads_allowed_extensions = [".*"]

#################################### LLM #####################################
# Configuration for LLM models (group name starts with 'llm')
# use 'llm' for the default LLM config
##############################################################################
[llm]
# AWS access key ID
#aws_access_key_id = ""

# AWS region name
#aws_region_name = ""

# AWS secret access key
#aws_secret_access_key = ""

# API key to use
api_key = "your-api-key"

# API base URL
#base_url = ""

# API version
#api_version = ""

# Cost per input token
#input_cost_per_token = 0.0

# Cost per output token
#output_cost_per_token = 0.0

# Custom LLM provider
#custom_llm_provider = ""

# Embedding API base URL
#embedding_base_url = ""

# Embedding deployment name
#embedding_deployment_name = ""

# Embedding model to use
embedding_model = "local"

# Maximum number of characters in an observation's content
#max_message_chars = 10000

# Maximum number of input tokens
#max_input_tokens = 0

# Maximum number of output tokens
#max_output_tokens = 0

# Model to use
model = "gpt-4o"

# Number of retries to attempt when an operation fails with the LLM.
# Increase this value to allow more attempts before giving up
#num_retries = 8

# Maximum wait time (in seconds) between retry attempts
# This caps the exponential backoff to prevent excessively long
#retry_max_wait = 120

# Minimum wait time (in seconds) between retry attempts
# This sets the initial delay before the first retry
#retry_min_wait = 15

# Multiplier for exponential backoff calculation
# The wait time increases by this factor after each failed attempt
# A value of 2.0 means each retry waits twice as long as the previous one
#retry_multiplier = 2.0

# Drop any unmapped (unsupported) params without causing an exception
#drop_params = false

# Using the prompt caching feature if provided by the LLM and supported
#caching_prompt = true

# Base URL for the OLLAMA API
#ollama_base_url = ""

# Temperature for the API
#temperature = 0.0

# Timeout for the API
#timeout = 0

# Top p for the API
#top_p = 1.0

# If model is vision capable, this option allows to disable image processing (useful for cost reduction).
#disable_vision = true

#################################### Named LLM configurations #####################################
# Configuration per LLM model:
# - use section names 'llm.<model_name>', where <model_name> is however you want to name the model configuration.
# - for example, you can specify a named LLM configuration for 'gpt-4o' as follows:
# [llm.gpt4o]
# model = "gpt-4o"
# api_key = "your-api-key"
# ...
#
# Any and all settings from the default LLM config above may be specified, and they will override the settings in the 'llm' group.
# This allows for specifying settings per LLM model, which is useful for specifying rate limits, fallbacks, etc. per model, or
# even just saving your favorite models' configurations in the config file for easy reference.
#
# Then, in order to use a named LLM, you can:
# 1. Without Router:
#    - specify the 'llm.<model_name>' in the --llm_config=... or -l=... command line option, if running from CLI
#    - if you want, specify a 'llm.<model_name>' in the default Agent configuration:
#       [agent]
#       llm_config='llm.<model_name>'
#    - or in the configuration of a specific Agent:
#       [agent.<agent_name>]
#       llm_config='llm.<model_name>'
# 2. With Router:
#    - specify the 'llm.<model_name>' in the router section:
#       [router_config]
#       default_model='llm.<model_name>'
#       model_list = ['llm.<model_name>', ...]
# Any of the options above, if specified, will take precedence over the settings in the default 'llm' group.
#
# IMPORTANT:
# If Router is used, it takes precedence over ALL the agent specific or default LLM config.
# ONLY the LLMs in the router config will be used.
#
##############################################################################

# --- Example 1: Anthropic w/ Sonnet 3.5

#[llm.ant-sonnet]
#model = "anthropic/claude-3-5-sonnet-20240620"
#api_key = "sk-ant-xxx"
#base_url not needed
# Note: all other models may have these parameters, which are optional,
# but are only mentioned here for brevity. These are example values!
#max_retries = 3       # Number of retries to attempt when an operation fails
#max_tokens = 4000     # Maximum number of output tokens
#tpm = 10000           # Tokens per minute limit
#rpm = 6               # Requests per minute limit


# --- Example 2: OpenAI w/ GPT-4o

# See: https://platform.openai.com/docs/models

#[llm.gpt4o-mini]
#model = "gpt-4o"
#api_key = "sk-proj-xxx"
#base_url not needed
# This has 128K context length with 16K max output tokens!
# "Dynamic model continuously updated"
#max_tokens = 16384     # Maximum number of output tokens
#tpm = 10000           # Tokens per minute limit
#rpm = 6               # Requests per minute limit


# --- Example 3: OpenRouter w/ Qwen 2.5

# See: https://openrouter.ai/models/

#[llm.or-qwen-2.5]
#model = "openrouter/qwen/qwen-2.5-72b-instruct"
#base_url = "https://openrouter.ai/api/v1" # Optional with litellm if model starts with "openrouter/"
#api_key = "sk-or-v1-xxx"


# --- Example 4: Groq w/ Llama 3.2 90B

#[llm.groq-lama-3.2-90b]
#model = "groq/llama-3.2-90b-text-preview"
#base_url = "https://api.groq.com/openai/v1"
#api_key = "gsk_xxx"


################################### Router ###################################
# litellm Router configuration
# https://litellm.vercel.app/docs/routing
# The use of Router is optional, and by default disabled.
# If not specified, see above for the default LLM config and custom (named) LLM configs.
##############################################################################

# The "router_config"section can only occur once in the config.toml file!
#[router_config]

# The default model to use for routing, which must be defined as a Named LLM config above.
#default_model = "llm.gpt-4o"

# The models to use for routing, which must be defined as Named LLM configs above and include the router's default model.
#model_list = ["llm.gpt-4o", "llm.groq-lama-3.2-90b"]

# The strategy to use for routing (e.g., usage-based-routing, cost-based-routing)
#routing_strategy = "usage-based-routing"

# Number of retries to attempt when an operation fails
#num_retries = 3

# waits min. 5s before retrying request
#retry_after = 15

# cooldown model if it fails > 1 call in a minute
#allowed_fails = 1

# cooldown the deployment for 100 seconds if it num_fails > allowed_fails
#cooldown_time = 100

# raise timeout error if call takes > 240s
#timeout = 240

# Whether to cache responses for reuse
#cache_responses = false

# Additional cache configuration options, see documentation for details
#[router_config.cache_kwargs]

# The retry policy for Router is optional, but without it liteLLM will retry on all errors of the types below.
# You can use this section to limit the retries on errors that are likely permanent errors, such as BadRequest, Authentication, probably ContentPolicyViolation.
#[router_config.retry_policy]
#RateLimitErrorAllowedFails=3
#TimeoutErrorRetries=3
#InternalServerErrorRetries=3
#ContentPolicyViolationErrorRetries=0
#AuthenticationErrorRetries=0
#BadRequestErrorRetries=0


#################################### Agent ###################################
# Configuration for agents (group name starts with 'agent')
# Use 'agent' for the default agent config
# otherwise, group name must be `agent.<agent_name>` (case-sensitive), e.g.
# agent.CodeActAgent
##############################################################################
[agent]
# Name of the micro agent to use for this agent
#micro_agent_name = ""

# Memory enabled
#memory_enabled = false

# Memory maximum threads
#memory_max_threads = 3

# LLM config group to use
#llm_config = 'your-llm-config-group'

[agent.RepoExplorerAgent]
# Example: use a cheaper model for RepoExplorerAgent to reduce cost, especially
# useful when an agent doesn't demand high quality but uses a lot of tokens
llm_config = 'gpt3'

#################################### Sandbox ###################################
# Configuration for the sandbox
##############################################################################
[sandbox]
# Sandbox timeout in seconds
#timeout = 120

# Sandbox user ID
#user_id = 1000

# Container image to use for the sandbox
#base_container_image = "nikolaik/python-nodejs:python3.12-nodejs22"

# Use host network
#use_host_network = false

# Enable auto linting after editing
#enable_auto_lint = false

# Whether to initialize plugins
#initialize_plugins = true

# Extra dependencies to install in the runtime image
#runtime_extra_deps = ""

# Environment variables to set at the launch of the runtime
#runtime_startup_env_vars = {}

# BrowserGym environment to use for evaluation
#browsergym_eval_env = ""

#################################### Security ###################################
# Configuration for security features
##############################################################################
[security]

# Enable confirmation mode
#confirmation_mode = false

# The security analyzer to use
#security_analyzer = ""

#################################### Eval ####################################
# Configuration for the evaluation, please refer to the specific evaluation
# plugin for the available options
##############################################################################
